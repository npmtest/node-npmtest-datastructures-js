{"/home/travis/build/npmtest/node-npmtest-datastructures-js/test.js":"/* istanbul instrument in package npmtest_datastructures_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-datastructures-js/lib.npmtest_datastructures_js.js":"/* istanbul instrument in package npmtest_datastructures_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_datastructures_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_datastructures_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-datastructures-js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-datastructures-js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_datastructures_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_datastructures_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_datastructures_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_datastructures_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_datastructures_js.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_datastructures_js.__dirname +\n                    '/lib.npmtest_datastructures_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/index.js":"/*!\r\n * datastructures-js\r\n * index (main module object)\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nvar di = require('./di');\r\n\r\nmodule.exports = (function() {\r\n\r\n    var self = {};\r\n\r\n    self.stack = function() {\r\n        var stack = di.getFactory('ds', 'stack')();\r\n        return di.exportObject(stack);\r\n    };\r\n\r\n    self.queue = function() {\r\n        var queue = di.getFactory('ds', 'queue')();\r\n        return di.exportObject(queue);\r\n    };\r\n\r\n    self.priorityQueue = function() {\r\n        var priorityQueue = di.getPriorityQueueFactory()();\r\n        return di.exportObject(priorityQueue);\r\n    };\r\n\r\n    self.set = function() {\r\n        var set = di.getSetFactory()();\r\n        return di.exportObject(set);\r\n    };\r\n\r\n    self.linkedList = function() {\r\n        var linkedList = di.getLinkedListFactory()();\r\n        return di.exportObject(linkedList);\r\n    };\r\n\r\n    self.doublyLinkedList = function() {\r\n        var doublyLinkedList = di.getDoublyLinkedListFactory()();\r\n        return di.exportObject(doublyLinkedList);\r\n    };\r\n\r\n    self.hashtable = function() {\r\n        var hashtable = di.getHashtableFactory()();\r\n        return di.exportObject(hashtable);\r\n    };\r\n\r\n    self.binarySearchTree = function() {\r\n        var binarySearchTree = di.getBinarySearchTreeFactory()();\r\n        return di.exportObject(binarySearchTree);\r\n    };\r\n\r\n    self.directedGraph = function() {\r\n       var directedGraph = di.getFactory('ds', 'directedGraph')();\r\n        return di.exportObject(directedGraph);\r\n    };\r\n\r\n    return self;\r\n\r\n}());","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/di.js":"/*!\r\n * datastructures-js\r\n * dependency container\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nvar modules = {\r\n    itr: require('./lib/iterators'),\r\n    nd: require('./lib/nodes'),\r\n    ds: require('./lib/dataStructures'),\r\n    hlp: require('./lib/helpers')\r\n};\r\n\r\nmodule.exports = (function() {\r\n\r\n    var self = {};\r\n\r\n    self.exportObject = function(obj) {\r\n        return obj.export();\r\n    };\r\n\r\n    self.getFactory = function(module, name, args) {\r\n        return modules[module][name].apply(null, args);\r\n    };\r\n\r\n    self.getHtIteratorFactory = function() {\r\n        var iteratorFactory = this.getFactory('itr', 'iterator');\r\n        return this.getFactory('itr', 'hashtableIterator', [iteratorFactory]);\r\n    };\r\n\r\n    self.getDllNodeFactory = function() {\r\n        var llNodeFactory = this.getFactory('nd', 'linkedListNode');\r\n        return this.getFactory('nd', 'doublyLinkedListNode', [llNodeFactory]);\r\n    };\r\n\r\n    self.getBstNodeFactory = function() {\r\n        var dllNodeFactory = this.getDllNodeFactory();\r\n        return this.getFactory('nd', 'binaryTreeNode', [dllNodeFactory]);\r\n    };\r\n\r\n    self.getSetFactory = function() {\r\n        var iteratorFactory = this.getFactory('itr', 'iterator');\r\n        return this.getFactory('ds', 'set', [iteratorFactory]);\r\n    };\r\n\r\n    self.getPriorityQueueFactory = function() {\r\n        var queue = this.getFactory('ds', 'queue')();\r\n        return this.getFactory('ds', 'priorityQueue', [queue]);\r\n    };\r\n\r\n    self.getLinkedListFactory = function() {\r\n        var llNodeFactory = this.getFactory('nd', 'linkedListNode');\r\n        return this.getFactory('ds', 'linkedList', [llNodeFactory]);\r\n    };\r\n\r\n    self.getDoublyLinkedListFactory = function() {\r\n        var linkedList = this.getFactory('ds', 'linkedList')(),\r\n            dllNodeFactory = this.getDllNodeFactory();\r\n        return this.getFactory('ds', 'doublyLinkedList', [dllNodeFactory, linkedList]);\r\n    };\r\n\r\n    self.getHashtableFactory = function() {\r\n        var htPairFactory = this.getFactory('nd', 'hashTablePair'),\r\n            hashFunction = this.getFactory('hlp', 'sumCharsHash', [31, 104729]),\r\n            htIteratorFactory = this.getHtIteratorFactory();\r\n        return this.getFactory('ds', 'hashtable', \r\n            [htPairFactory, htIteratorFactory, hashFunction]);\r\n    };\r\n\r\n    self.getBinarySearchTreeFactory = function() {\r\n        var bstNodeFactory = this.getBstNodeFactory();\r\n        return this.getFactory('ds', 'binarySearchTree', [bstNodeFactory]);\r\n    };\r\n\r\n    return self;\r\n}());","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/lib/iterators/index.js":"/*!\r\n * datastructures-js\r\n * index (iterators module object)\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = {\r\n    iterator: require('./iterator'),\r\n    hashtableIterator: require('./hashtableIterator')\r\n};","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/lib/iterators/iterator.js":"/*!\r\n * datastructures-js\r\n * iterator\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function() {\r\n\r\n    return function(elements) {\r\n        \r\n        var self = {\r\n            index: 0\r\n        };\r\n\r\n        self.hasNext = function() {\r\n            var length = Object.keys(elements).length;\r\n            if (length > 0 && this.index < length) {\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        self.next = function() {\r\n            var keys = Object.keys(elements);\r\n            if (this.hasNext()) {\r\n                var el = elements[keys[this.index]];\r\n                this.index++;\r\n                return el;\r\n            }\r\n            return null;\r\n        };\r\n\r\n        // export the iterator api\r\n        self.export = function() {\r\n            var that = this;\r\n            return {\r\n                hasNext: that.hasNext.bind(that),\r\n                next: that.next.bind(that)\r\n            };\r\n        };\r\n\r\n        return self;\r\n    };\r\n\r\n};","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/lib/iterators/hashtableIterator.js":"/*!\r\n * datastructures-js\r\n * hashtableIterator\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function(iteratorFactory) {\r\n\r\n    return function(elements) {\r\n        \r\n        var prototype = iteratorFactory(elements), \r\n            self = Object.create(prototype);\r\n\r\n        self.chainIterator = null;\r\n\r\n        self.hasNext = function() {\r\n            var length = Object.keys(elements).length;\r\n            if ((length > 0 && this.index < length) || \r\n                (this.chainIterator && this.chainIterator.hasNext())) {\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        self.next = function() {\r\n            if (!this.chainIterator && this.hasNext()) {\r\n                this.chainIterator = iteratorFactory(prototype.next());\r\n            }\r\n            if (this.chainIterator && this.chainIterator.hasNext()) {\r\n                return this.chainIterator.next();\r\n            }\r\n            else if (this.hasNext() && !this.chainIterator.hasNext()) {\r\n                this.chainIterator = null;\r\n                return this.next();\r\n            }\r\n\r\n            return null;\r\n        };\r\n        \r\n        return self;\r\n    };\r\n};","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/lib/nodes/index.js":"/*!\r\n * datastructures-js\r\n * index (nodes module object)\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = {\r\n    binaryTreeNode: require('./binaryTreeNode'),\r\n    hashTablePair: require('./hashTablePair'),\r\n    linkedListNode: require('./linkedListNode'),\r\n    doublyLinkedListNode: require('./doublyLinkedListNode')\r\n};","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/lib/nodes/binaryTreeNode.js":"/*!\r\n * datastructures-js\r\n * binaryTreeNode\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function(dllNodeFactory) {\r\n\r\n    return function(left, right, value) {\r\n        \r\n        var prototype = dllNodeFactory(left, right, value),\r\n            self = Object.create(prototype);\r\n\r\n        self.setLeft = self.setPrev;\r\n        self.setRight = self.setNext;\r\n        self.getLeft = self.getPrev;\r\n        self.getRight = self.getNext;\r\n\r\n        // export the binaryTreeNode api (reuse the doublyLinkedListNode export)\r\n        self.export = function() {\r\n            var exp = prototype.export();\r\n            return {\r\n                getRight: exp.getNext,\r\n                getLeft: exp.getPrev,\r\n                getValue: exp.getValue\r\n            };\r\n        };\r\n\r\n        return self;\r\n    };\r\n};","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/lib/nodes/hashTablePair.js":"/*!\r\n * datastructures-js\r\n * hashTablePair\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function() {\r\n\r\n    return function(key_, value_) {\r\n        \r\n        var self = {},\r\n            value = value_,\r\n            key = key_;\r\n\r\n        self.getKey = function() {\r\n            return key;\r\n        };\r\n\r\n        self.setValue = function(v) {\r\n            value = v;\r\n        };\r\n\r\n        self.getValue = function() {\r\n            return value;\r\n        };\r\n\r\n        // export the hashTablePair api\r\n        self.export = function() {\r\n            var that = this;\r\n            return {\r\n                getKey: that.getKey,\r\n                getValue: that.getValue\r\n            };\r\n        };\r\n\r\n        return self;\r\n    };\r\n};","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/lib/nodes/linkedListNode.js":"/*!\r\n * datastructures-js\r\n * linkedListNode\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function() {\r\n\r\n    return function(next_, value_) {\r\n        \r\n        var self = {},\r\n            next = next_,\r\n            value = value_;\r\n\r\n        self.setNext = function(n) {\r\n            next = n;\r\n        };\r\n        \r\n        self.setValue = function(v) {\r\n            value = v;\r\n        };\r\n\r\n        self.getNext = function() {\r\n            return next;\r\n        };\r\n        \r\n        self.getValue = function() {\r\n            return value;\r\n        };\r\n\r\n        // export the connected (next) node api\r\n        self.exportConnectedNode = function(node) {\r\n            return function() {\r\n                if (node !== null) {\r\n                    return {\r\n                        getNext: node.export().getNext,\r\n                        getValue: node.export().getValue\r\n                    };\r\n                }\r\n                return null;\r\n            };\r\n        };\r\n\r\n        // export the linkedListNode api\r\n        self.export = function() {\r\n            var that = this; // because context will change in the return\r\n            return {\r\n                getNext: that.exportConnectedNode(that.getNext()),\r\n                getValue: that.getValue\r\n            };\r\n        };\r\n\r\n        return self;\r\n    };\r\n\r\n};","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/lib/nodes/doublyLinkedListNode.js":"/*!\r\n * datastructures-js\r\n * doublyLinkedListNode\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function(llNodeFactory) {\r\n\r\n    return function(prev_, next, value) {\r\n        \r\n        var prototype = llNodeFactory(next, value),\r\n            self = Object.create(prototype),\r\n            prev = prev_;\r\n\r\n        self.setPrev = function(p) {\r\n            prev = p;\r\n        };\r\n\r\n        self.getPrev = function() {\r\n            return prev;\r\n        };\r\n\r\n        // export the connected (next & prev) nodes api\r\n        self.exportConnectedNode = function(node) {\r\n            return function() {\r\n                if (node !== null) {\r\n                    return {\r\n                        getNext: node.export().getNext,\r\n                        getPrev: node.export().getPrev,\r\n                        getValue: node.export().getValue\r\n                    };\r\n                }\r\n                return null;\r\n            };\r\n        };\r\n\r\n        // export the doublyLinkedListNode api\r\n        self.export = function() {\r\n            var that = this;\r\n            return {\r\n                getNext: that.exportConnectedNode(that.getNext()),\r\n                getPrev: that.exportConnectedNode(that.getPrev()),\r\n                getValue: that.getValue\r\n            };\r\n        };\r\n\r\n        return self;\r\n    };\r\n};","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/lib/dataStructures/index.js":"/*!\r\n * datastructures-js\r\n * index (data structures module object)\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = {\r\n    binarySearchTree: require('./binarySearchTree'),\r\n    directedGraph: require('./directedGraph'),\r\n    doublyLinkedList: require('./doublyLinkedList'),\r\n    linkedList: require('./linkedList'),\r\n    hashtable: require('./hashtable'),\r\n    queue: require('./queue'),\r\n    priorityQueue: require('./priorityQueue'),\r\n    set: require('./set'),\r\n    stack: require('./stack')\r\n};","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/lib/dataStructures/binarySearchTree.js":"/*!\r\n * datastructures-js\r\n * binarySearchTree\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function(bstNodeFactory) {\r\n\r\n    return function() {\r\n\r\n        var self = {\r\n            root: null,\r\n            nodesCount: 0\r\n        };\r\n\r\n        // get min value node in tree. aka last left node\r\n        var getMin = function(node) {\r\n            var currentNode = node;\r\n            while (currentNode.getLeft()) {\r\n                currentNode = currentNode.getLeft();\r\n            }\r\n            return currentNode;\r\n        },\r\n\r\n        // get mmax value node in tree. aka last right node\r\n        getMax = function(node) {\r\n            var currentNode = node;\r\n            while (currentNode.getRight()) {\r\n                currentNode = currentNode.getRight();\r\n            }\r\n            return currentNode;\r\n        };\r\n\r\n        self.insert = function(value) {\r\n            var n = bstNodeFactory(null, null, value);\r\n\r\n            var insertNode = function(currentNode, node) {\r\n                    if (node.getValue() > currentNode.getValue()) {\r\n                        if (currentNode.getRight() === null) {\r\n                            currentNode.setRight(node);\r\n                        }\r\n                        else {\r\n                            insertNode(currentNode.getRight(), node);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (currentNode.getLeft() === null) {\r\n                            currentNode.setLeft(node);\r\n                        }\r\n                        else {\r\n                            insertNode(currentNode.getLeft(), node);\r\n                        }\r\n                    }\r\n                };\r\n\r\n            if (this.root === null) {\r\n                this.root = n;\r\n            }\r\n            else {\r\n                insertNode(this.root, n);\r\n            }\r\n            this.nodesCount++;\r\n        };\r\n\r\n        self.remove = function(value) {\r\n            // removing a node is not an easy task\r\n            var removeNode = function(node, value) {\r\n                if (!node) {\r\n                    return null;\r\n                }\r\n                // when we get to the node, we have three possibilities: \r\n                if (value === node.getValue()) {\r\n\r\n                    // 1. the node has no children\r\n                    if (node.getLeft() === null && node.getRight() === null) {\r\n                        self.nodesCount--;\r\n                        return null;\r\n                    }\r\n\r\n                    // 2. the node has one child\r\n                    if (node.getLeft() === null) {\r\n                        self.nodesCount--;\r\n                        return node.getRight();\r\n                    }\r\n                    if (node.getRight() === null) {\r\n                        self.nodesCount--;\r\n                        return node.getLeft();\r\n                    }\r\n\r\n                    // 3. the node has two children\r\n                    var minNode = getMin(node.getRight()); // find min in the right\r\n                    node.setValue(minNode.getValue()); // copy the min right value to the node\r\n                    node.setRight(removeNode(node.getRight(), minNode.getValue())); // recursievely remove the right\r\n                    return node;\r\n                }\r\n                // so the node is not what we are looking for, we search the tree recursievely\r\n                else if (value < node.getValue()) {\r\n                    node.setLeft(removeNode(node.getLeft(), value));\r\n                    return node;\r\n                }\r\n                else {\r\n                    node.setRight(removeNode(node.getRight(), value));\r\n                    return node;\r\n                }\r\n            };\r\n\r\n            this.root = removeNode(this.root, value);\r\n        };\r\n\r\n        self.traverse = function(order, func) {\r\n\r\n            var inOrder = function(node, func) {\r\n                    if (node !== null) {\r\n                        inOrder(node.getLeft(), func);\r\n                        func.call(func, node.getValue());\r\n                        inOrder(node.getRight(), func);\r\n                    }\r\n                },\r\n\r\n                preOrder = function(node, func) {\r\n                    if (node !== null) {\r\n                        func.call(func, node.getValue());\r\n                        preOrder(node.getLeft(), func);\r\n                        preOrder(node.getRight(), func);\r\n                    }\r\n                },\r\n\r\n                postOrder = function(node, func) {\r\n                    if (node !== null) {\r\n                        postOrder(node.getLeft(), func);\r\n                        postOrder(node.getRight(), func);\r\n                        func.call(func, node.getValue());\r\n                    }\r\n                };\r\n\r\n            switch(order) {\r\n                case 'inOrder': \r\n                    inOrder(this.root, func);\r\n                    break;\r\n                case 'preOrder':\r\n                    preOrder(this.root, func);\r\n                    break;\r\n                case 'postOrder':\r\n                    postOrder(this.root, func);\r\n                    break;\r\n            }\r\n        };\r\n\r\n        self.find = function(value) {\r\n            var current = this.root;\r\n            while (current) {\r\n                if (current.getValue() === value) {\r\n                    return current.export();\r\n                }\r\n                current = value > current.getValue() ? \r\n                    current.getRight() : current.getLeft();\r\n            }\r\n            return null;\r\n        };\r\n\r\n        self.getRoot = function() {\r\n            return this.root ? this.root.export() : null;\r\n        };\r\n\r\n        self.getMinValue = function() {\r\n            return this.root ? getMin(this.root).getValue() : null;\r\n        };\r\n\r\n        self.getMaxValue = function() {\r\n            return this.root ? getMax(this.root).getValue() : null;\r\n        };\r\n\r\n        self.count = function() {\r\n            return this.nodesCount;\r\n        };\r\n\r\n        // export the binarySearchTree api\r\n        self.export = function() {\r\n            return this;\r\n        };\r\n\r\n        return self;       \r\n    };\r\n\r\n\r\n};","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/lib/dataStructures/directedGraph.js":"/*!\r\n * datastructures-js\r\n * directedGraph\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function() {\r\n\r\n    return function() {\r\n        \r\n        var self = {},\r\n            vertices = [], // graph nodes\r\n            directions = [], // graph directions [][]\r\n            verticesCount = 0;\r\n\r\n        var removeElementFromArray = function(arr, v) {\r\n            if (isNaN(parseInt(v))) {\r\n                delete arr[v];\r\n            }\r\n            else {\r\n                arr.splice(v, 1);\r\n            }\r\n        },\r\n\r\n        calculatePathWeight = function(path) {\r\n            var sum = 0;\r\n            for (var i = 0; i <= path.length - 2; i++) {\r\n                sum += directions[path[i]][path[i + 1]];\r\n            }\r\n            return sum;\r\n        };\r\n\r\n        self.addVertex = function(v) {\r\n            if (vertices[v] === undefined) {\r\n                vertices[v] = true;\r\n                verticesCount++;\r\n            }\r\n            else {\r\n                throw {\r\n                    message: 'vertex ' + v + ' already exists'\r\n                };\r\n            }\r\n        };\r\n\r\n        self.removeVertex = function(v) {\r\n            // remove the vertex from vertices\r\n            if (vertices[v]) {\r\n                removeElementFromArray(vertices, v);\r\n                verticesCount--;\r\n            }\r\n\r\n            // remove the directions from vertex\r\n            if (directions[v] !== undefined) {\r\n                removeElementFromArray(directions, v);\r\n            }\r\n\r\n            // remove the directions to vertex\r\n            for (var vertex in directions) {\r\n                if (directions[vertex][v] && Object.keys(directions[vertex]).length === 1) {\r\n                    removeElementFromArray(directions, vertex);\r\n                }\r\n                else {\r\n                    removeElementFromArray(directions[vertex], v);\r\n                }\r\n            }\r\n        };\r\n\r\n        self.hasVertex = function(v) {\r\n            return vertices[v] !== undefined ? true : false;\r\n        };\r\n\r\n        self.countVertices = function() {\r\n            return verticesCount;\r\n        };\r\n\r\n        self.visit = function(func) {\r\n            var visit = function(dirs, visited, func) {\r\n                for (var vertex in dirs) {\r\n                    if (dirs.hasOwnProperty(vertex) && !visited[vertex]) {\r\n                        func.call(func, vertex);\r\n                        visited[vertex] = true;\r\n                        if (directions[vertex]) {\r\n                            visit(directions[vertex], visited, func); // depth-first approach\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            visit(directions, [], func);\r\n        };\r\n\r\n        self.getSeparatedVertices = function() {\r\n            var separated = [],\r\n                directionsVertices = [];\r\n            this.visit(function(vertex){\r\n                directionsVertices[vertex] = true;\r\n            });\r\n\r\n            for (var v in vertices) {\r\n                if (vertices.hasOwnProperty(v) && !directionsVertices[v]) {\r\n                    separated.push(v);\r\n                }\r\n            }\r\n\r\n            return separated;\r\n        };\r\n\r\n        self.addDirection = function(v1, v2, weight) {\r\n            if (vertices[v1] && vertices[v2]) {\r\n                if (directions[v1] === undefined) {\r\n                    directions[v1] = [];\r\n                }\r\n\r\n                if (isNaN(parseInt(weight))) {\r\n                    throw {\r\n                        message: 'weight is not a valid number' \r\n                    };\r\n                }\r\n\r\n                directions[v1][v2] = weight;\r\n            }\r\n        };\r\n\r\n        self.hasDirection = function(v1, v2) {\r\n            if (this.hasVertex(v1) && this.hasVertex(v2) && \r\n                directions[v1] && directions[v1][v2] !== undefined) {\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        // return the weight of a direction if it exists\r\n        self.getDirectionWeight = function(v1, v2) {\r\n            return this.hasDirection(v1, v2) ? directions[v1][v2] : null;\r\n        };\r\n\r\n        self.removeDirection = function(v1, v2) {\r\n            if (this.hasDirection(v1, v2)) {\r\n                if (Object.keys(directions[v1]).length === 1) {\r\n                    removeElementFromArray(directions, v1);\r\n                }\r\n                else {\r\n                    removeElementFromArray(directions[v1], v2);\r\n                }\r\n            }\r\n        };\r\n\r\n        self.findShortestPath = function(v1, v2) {\r\n            var shortestPaths = [],\r\n                reccentPathWeight,\r\n                existingPathWeight;\r\n\r\n            var findShortestPath = function(v1, v2, path, visited) {\r\n                    if (visited.indexOf(v1) === -1) {\r\n\r\n                        visited.push(v1); // visit the starting vertex\r\n                        path.push(v1); // push the starting vertex in the path\r\n\r\n                        if (v1 === v2) { // if we arrived to the destination\r\n                            if (shortestPaths.length > 0) { // if there's already a shortest path\r\n\r\n                                // calculate path weight\r\n                                reccentPathWeight = calculatePathWeight(path);\r\n                                // calculate the existing shortest path weight\r\n                                existingPathWeight = calculatePathWeight(shortestPaths[0]);\r\n\r\n                                // reset the shortestPaths if recent path is better\r\n                                if (reccentPathWeight < existingPathWeight) {\r\n                                    shortestPaths = [];\r\n                                }\r\n                                // if the recent path is better or similar then push it to shortestPaths\r\n                                if (reccentPathWeight <= existingPathWeight) {\r\n                                    shortestPaths.push(path);\r\n                                }\r\n                            }\r\n                            else {\r\n                                // no shortest path yet, then push the path\r\n                                shortestPaths.push(path);\r\n                            }\r\n                        }\r\n                        // we haven't arrived to the destination and we still have directions\r\n                        else if (directions[v1] && (v1 !== v2)) {\r\n                            for (var vertex in directions[v1]) {\r\n                                // depth-first appraoch\r\n                                findShortestPath(vertex, v2, path, visited);\r\n                                // slice path and visited arrays to allow to push the other directions of v1\r\n                                path = path.slice(0, path.indexOf(v1) + 1);\r\n                                visited = visited.slice(0, path.indexOf(v1) + 1);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n            findShortestPath(v1, v2, [], []);\r\n            return shortestPaths;\r\n        };\r\n\r\n        // export the directedGraph api\r\n        self.export = function() {\r\n            return this;\r\n        };\r\n\r\n        return self;        \r\n    };\r\n\r\n};","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/lib/dataStructures/doublyLinkedList.js":"/*!\r\n * datastructures-js\r\n * doublyLinkedList\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function(dllNodeFactory, linkedList) {\r\n\r\n    return function() {\r\n\r\n        var self = Object.create(linkedList);\r\n\r\n        self.addFirst = function(val) {\r\n            if (this.head === null) {\r\n                this.head = dllNodeFactory(null, null, val);\r\n            }\r\n            else {\r\n                this.head.setPrev(dllNodeFactory(null, this.head, val));\r\n                this.head = this.head.getPrev();\r\n            }\r\n            this.nodesCount++;\r\n        };\r\n\r\n        self.addLast = function(val) {\r\n            if (this.head === null) {\r\n                this.head = dllNodeFactory(null, null, val);\r\n            }\r\n            else {\r\n                var lastNode = this.head;\r\n                while (lastNode.getNext()) {\r\n                    lastNode = lastNode.getNext();\r\n                } \r\n                lastNode.setNext(dllNodeFactory(lastNode, null, val));\r\n            }\r\n            this.nodesCount++;\r\n        };\r\n\r\n        self.addAfter = function(val, newVal) {\r\n            var foundNode = this.findNode(val);\r\n            if (foundNode === null) {\r\n                throw {\r\n                    message: 'node ' + val + ' not found'\r\n                };\r\n            }\r\n            else {\r\n                var recentNext = foundNode.getNext();\r\n                var newNode = dllNodeFactory(foundNode, recentNext, newVal);\r\n                foundNode.setNext(newNode);\r\n                if (recentNext !== null) {\r\n                    recentNext.setPrev(newNode);\r\n                }\r\n                this.nodesCount++;\r\n            }\r\n        };\r\n\r\n        self.addBefore = function(val, newVal) {\r\n            var foundNode = this.findNode(val);\r\n            if (foundNode === null) {\r\n                throw {\r\n                    message: 'node ' + val + ' not found'\r\n                };\r\n            }\r\n            var recentBefore = foundNode.getPrev();\r\n            var newNode = dllNodeFactory(recentBefore, foundNode, newVal);\r\n            foundNode.setPrev(newNode);\r\n            if (recentBefore !== null) {\r\n                recentBefore.setNext(newNode);\r\n            }\r\n            else {\r\n                this.head = newNode;\r\n            }\r\n            this.nodesCount++;\r\n            \r\n        };\r\n\r\n        self.findBefore = function(val) {\r\n            var foundNode = this.findNode(val);\r\n            return foundNode ? foundNode.getPrev() : null;\r\n        };\r\n\r\n        self.removeFirst = function() {\r\n            if (this.head !== null) {\r\n                if (this.head.getNext() === null) {\r\n                    this.head = null;\r\n                }\r\n                else {\r\n                    var second = this.head.getNext();\r\n                    second.setPrev(null);\r\n                    this.head = second;\r\n                }\r\n                this.nodesCount--;\r\n            }\r\n        };\r\n\r\n        self.removeLast = function() {\r\n            if (this.head !== null) {\r\n                if (this.head.getNext() === null) {\r\n                    this.head = null;\r\n                }\r\n                else {\r\n                    var currentNode = this.head;\r\n                    while (currentNode.getNext()) {\r\n                        currentNode = currentNode.getNext();\r\n                    }\r\n                    currentNode.getPrev().setNext(null); //separate last node\r\n                }\r\n                this.nodesCount--;\r\n            }\r\n        };\r\n\r\n        self.remove = function(val) {\r\n            var foundNode = this.findNode(val);\r\n            if (foundNode === null) {\r\n                throw {\r\n                    message: 'node ' + val + ' not found'\r\n                };\r\n            }\r\n\r\n            if (foundNode === this.head) {\r\n                this.removeFirst();\r\n                return;\r\n            }\r\n\r\n            var prev = foundNode.getPrev(),\r\n                next = foundNode.getNext();\r\n                \r\n            prev.setNext(next);\r\n            if (next !== null) {\r\n                next.setPrev(prev);\r\n            }\r\n\r\n            this.nodesCount--;\r\n            \r\n        };\r\n\r\n        return self;        \r\n    };\r\n\r\n};","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/lib/dataStructures/linkedList.js":"/*!\r\n * datastructures-js\r\n * linkedList\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function(linkedListNode) {\r\n\r\n    return function() {\r\n        \r\n        var self = {\r\n            head: null,\r\n            nodesCount: 0\r\n        };\r\n\r\n        self.findNode = function(val) {\r\n            var currentNode = this.head;\r\n            while (currentNode) {\r\n                if (currentNode.getValue() === val) {\r\n                    return currentNode;\r\n                }\r\n                currentNode = currentNode.getNext();\r\n            }\r\n\r\n            return null;\r\n        };\r\n\r\n        self.findBeforeNode = function(val) {\r\n            var currentNode = this.head,\r\n                foundNode = null;\r\n\r\n            while (currentNode.getNext()) {\r\n                if (currentNode.getNext().getValue() === val) {\r\n                    foundNode = currentNode;\r\n                    break;\r\n                }\r\n                currentNode = currentNode.getNext();\r\n            }\r\n\r\n            return foundNode;\r\n        };\r\n            \r\n        self.addFirst = function(val) {\r\n            this.head = this.head === null ? \r\n                linkedListNode(null, val) : linkedListNode(this.head, val);\r\n            this.nodesCount++;\r\n        };\r\n\r\n        self.addLast = function(val) {\r\n            if (this.head === null) {\r\n                this.head = linkedListNode(null, val);\r\n            }\r\n            else {\r\n                var lastNode = this.head;\r\n                while (lastNode.getNext()) {\r\n                    lastNode = lastNode.getNext();\r\n                } \r\n                lastNode.setNext(linkedListNode(null, val));\r\n            }\r\n            this.nodesCount++;\r\n        };\r\n\r\n        self.addAfter = function(val, newVal) {\r\n            var foundNode = self.findNode(val);\r\n            if (foundNode === null) {\r\n                throw {\r\n                    message: 'node ' + val + ' not found'\r\n                };\r\n            }\r\n\r\n            if (foundNode.getNext() === null) {\r\n                foundNode.setNext(linkedListNode(null, newVal));\r\n            }\r\n            else {\r\n                var newNode = linkedListNode(foundNode.getNext(), newVal);\r\n                foundNode.setNext(newNode);\r\n            }\r\n\r\n           this.nodesCount++;   \r\n            \r\n        };\r\n\r\n        self.addBefore = function(val, newVal) {\r\n            var foundNode = self.findNode(val);\r\n            if (foundNode === null) {\r\n                throw {\r\n                    message: 'node ' + val + ' not found'\r\n                };\r\n            }\r\n\r\n            if (foundNode === this.head) {\r\n                this.addFirst(newVal);\r\n                return;\r\n            }\r\n\r\n            var before = this.head;\r\n            while (before.getNext()) {\r\n                if (before.getNext() === foundNode) {\r\n                    this.addAfter(before.getValue(), newVal);\r\n                    return;\r\n                }\r\n                before = before.getNext();\r\n            }   \r\n            \r\n        };\r\n\r\n        self.find = function(val) {\r\n            var foundNode = this.findNode(val);\r\n            return foundNode !== null ? foundNode.export() : null;\r\n        };\r\n\r\n        self.findBefore = function(val) {\r\n            var foundNode = this.findBeforeNode(val);\r\n            return foundNode !== null ? foundNode.export() : null;\r\n        };\r\n\r\n        self.findFirst = function() {\r\n            var firstNode = this.head;\r\n            return firstNode !== null ? this.head.export() : null;\r\n        };\r\n\r\n        self.findLast = function() {\r\n            var currentNode = this.head;\r\n            while (currentNode && currentNode.getNext()) {\r\n                currentNode = currentNode.getNext();\r\n            }\r\n\r\n            return currentNode !== null ? currentNode.export() : null;\r\n        };\r\n\r\n        self.removeFirst = function() {\r\n            if (this.head !== null) {\r\n                this.head = this.head.getNext() === null ? null : this.head.getNext();\r\n                this.nodesCount--;\r\n            }\r\n        };\r\n\r\n        self.removeLast = function() {\r\n            if (this.head !== null) {\r\n                if (this.head.getNext() === null) {\r\n                    this.head = null;\r\n                }\r\n                else {\r\n                    var currentNode = this.head;\r\n                    while (currentNode.getNext()) {\r\n                        if (currentNode.getNext().getNext() === null) {\r\n                            currentNode.setNext(null);\r\n                            break;\r\n                        }\r\n                        currentNode = currentNode.getNext();\r\n                    }\r\n                }\r\n                this.nodesCount--;\r\n            }\r\n        };\r\n\r\n        self.remove = function(val) {\r\n            var foundNode = this.findNode(val);\r\n\r\n            if (foundNode === null) {\r\n                throw {\r\n                    message: 'node ' + val + ' not found'\r\n                };\r\n            }\r\n\r\n            if (foundNode === this.head) {\r\n                this.removeFirst();\r\n                return;\r\n            }\r\n\r\n            if (foundNode.getNext() === null) {\r\n                this.removeLast();\r\n                return;\r\n            }\r\n\r\n            var beforeNode = this.findBeforeNode(val);\r\n            beforeNode.setNext(foundNode.getNext()); // link before to next which detaches node from list\r\n            this.nodesCount--;\r\n            \r\n        };\r\n\r\n        self.count = function() {\r\n            return this.nodesCount;\r\n        };\r\n\r\n        self.clear = function() {\r\n            this.head = null;\r\n            this.nodesCount = 0;\r\n        };\r\n\r\n        // export the linkedList api\r\n        self.export = function() {\r\n            var that = this;\r\n            return {\r\n                addFirst: that.addFirst.bind(that),\r\n                addLast: that.addLast.bind(that),\r\n                addAfter: that.addAfter.bind(that),\r\n                addBefore: that.addBefore.bind(that),\r\n                find: that.find.bind(that),\r\n                findFirst: that.findFirst.bind(that),\r\n                findLast: that.findLast.bind(that),\r\n                findBefore: that.findBefore.bind(that),\r\n                remove: that.remove.bind(that),\r\n                removeFirst: that.removeFirst.bind(that),\r\n                removeLast: that.removeLast.bind(that),\r\n                count: that.count.bind(that),\r\n                clear: that.clear.bind(that)\r\n            };\r\n        };\r\n\r\n        return self;        \r\n    };\r\n};","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/lib/dataStructures/hashtable.js":"/*!\r\n * datastructures-js\r\n * hashtable\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function(htPairFactory, htIteratorFactory, hashFunction) {\r\n\r\n    return function() {\r\n        \r\n        var self = {},\r\n            elements = [], // hashtable array\r\n            count = 0;\r\n\r\n        // chain the collisions (keys with similar hash) in an array\r\n        var chain = function(hash, key, data) {\r\n            elements[hash].push(htPairFactory(key, data));\r\n            count++;\r\n        },\r\n\r\n        // save a new key-value pair to the hashtable array\r\n        save = function(hash, key, data) {\r\n            elements[hash] = [htPairFactory(key, data)];\r\n            count++;\r\n        },\r\n\r\n        // override an existing key value\r\n        update = function(hash, key, data) {\r\n            var i, pair;\r\n            for (i in elements[hash]) {\r\n                pair = elements[hash][i];\r\n                if (pair.getKey() === key) {\r\n                    pair.setValue(data);\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n\r\n        // adds or updates a key-value pair in the hashtable array\r\n        self.put = function(key, data) {\r\n            var hash = hashFunction(key);\r\n            if (elements[hash] === undefined) {\r\n                save(hash, key, data);\r\n            }\r\n            else if (!update(hash, key, data)) {\r\n                chain(hash, key, data);\r\n            }\r\n        };\r\n\r\n        // return a pair value by a given key\r\n        self.get = function(key) {\r\n            var i, pair, \r\n            hash = hashFunction(key);\r\n            if (elements[hash] !== undefined) {\r\n                for (i in elements[hash]) {\r\n                    pair = elements[hash][i];\r\n                    if (pair.getKey() === key) {\r\n                        return pair.getValue();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        // remove a key-value pair by by a given key\r\n        self.remove = function(key) {\r\n            var i, length,\r\n            hash = hashFunction(key);\r\n            if (elements[hash] !== undefined) {\r\n                length = elements[hash].length;\r\n                if (length === 1) {\r\n                    delete elements[hash];\r\n                    count--;\r\n                }\r\n                else {\r\n                    for (i = 0; i < length; i++) {\r\n                        if (elements[hash][i].getKey() === key) {\r\n                            elements[hash].splice(i, 1);\r\n                            count--;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        // checks if a key exists in the hashtable array\r\n        self.contains = function(key) {\r\n            var hash = hashFunction(key);\r\n            return elements[hash] !== undefined ? true : false;\r\n        };\r\n\r\n        // returns an iterator on the hastable array\r\n        self.iterator = function() {\r\n            return htIteratorFactory(elements).export();\r\n        };\r\n\r\n        // return the number of pairs (elements) in the hashtable array\r\n        self.count = function() {\r\n            return count;\r\n        };\r\n\r\n        // export the hashtable api\r\n        self.export = function() {\r\n            return this;\r\n        };\r\n\r\n        return self;\r\n    };\r\n\r\n};","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/lib/dataStructures/queue.js":"/*!\r\n * datastructures-js\r\n * queue\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n 'use strict';\r\n\r\n module.exports = function() {\r\n\r\n    return function() {\r\n        \r\n        var self = {\r\n            elements: []\r\n        };\r\n        \r\n        self.isEmpty = function() {\r\n            return this.elements.length > 0 ? false : true;\r\n        };\r\n\r\n        self.length = function() {\r\n            return this.elements.length;\r\n        };\r\n\r\n        self.enqueue = function(el) {\r\n            this.elements.push(el);\r\n        };\r\n\r\n        self.dequeue = function() {\r\n            return !this.isEmpty() ? this.elements.shift() : null;\r\n        };\r\n\r\n        self.front = function() {\r\n            return !this.isEmpty() ? this.elements[0] : null;\r\n        };\r\n\r\n        self.back = function() {\r\n            return !this.isEmpty() ? this.elements[this.elements.length - 1] : null;\r\n        };\r\n\r\n        // export the queue api\r\n        self.export = function() {\r\n            var that = this;\r\n            return {\r\n                isEmpty: that.isEmpty.bind(that),\r\n                length: that.length.bind(that),\r\n                enqueue: that.enqueue.bind(that),\r\n                dequeue: that.dequeue.bind(that),\r\n                front: that.front.bind(that),\r\n                back: that.back.bind(that),\r\n            };\r\n        };\r\n\r\n        return self;\r\n    };\r\n\r\n };","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/lib/dataStructures/priorityQueue.js":"/*!\r\n * datastructures-js\r\n * priorityQueue\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function(queue) {\r\n\r\n    return function() {\r\n        \r\n        var self = Object.create(queue);\r\n\r\n        // determine the top priority element\r\n        var getTopPriorityIndex = function() {\r\n                var  length = self.elements.length;\r\n                if (length > 0) {\r\n                    var topPriorityIndex = 0;\r\n                    var topPriority = self.elements[0].priority;\r\n                    for (var i = 1; i < length; i++) {\r\n                        var priority = self.elements[i].priority;\r\n                        if (priority < topPriority) {\r\n                            topPriorityIndex = i;\r\n                            topPriority = priority;\r\n                        }\r\n                    }\r\n                    return topPriorityIndex;\r\n                }\r\n                return -1;      \r\n            };\r\n\r\n        self.enqueue = function(element, priority) {\r\n            if (isNaN(parseInt(priority))) {\r\n                throw {\r\n                    message: 'priority should be a number'\r\n                };\r\n            }\r\n            this.elements.push({ // element is pushed as an object with a priority\r\n                element: element,\r\n                priority: priority\r\n            });\r\n        };\r\n\r\n        self.dequeue = function() {\r\n            var topPriorityIndex = getTopPriorityIndex();\r\n            return topPriorityIndex > -1 ? \r\n                this.elements.splice(topPriorityIndex, 1)[0].element : null;\r\n        };\r\n\r\n        self.front = function() {\r\n            return !this.isEmpty() ? this.elements[0].element : null;\r\n        };\r\n\r\n        self.back = function() {\r\n            return !self.isEmpty() ? \r\n                this.elements[this.elements.length - 1].element : null;\r\n        };\r\n\r\n        return self;        \r\n    };\r\n\r\n};","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/lib/dataStructures/set.js":"/*!\r\n * datastructures-js\r\n * set\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function(iterator) {\r\n\r\n    var set = function() {\r\n\r\n        var self = {},\r\n            elements = [];\r\n\r\n        self.add = function(element) {\r\n            if (elements.indexOf(element) === -1) {\r\n                elements.push(element);\r\n            }\r\n        };\r\n\r\n        self.remove = function(element){ \r\n            var index = elements.indexOf(element);\r\n            if (index !== -1) {\r\n                elements.splice(index, 1);\r\n            }\r\n        };\r\n\r\n        self.iterator = function() {\r\n            return iterator(elements).export();\r\n        };\r\n\r\n        self.isEmpty =function() {\r\n            return elements.length > 0 ? false : true;\r\n        };\r\n\r\n        self.size = function(){\r\n            return elements.length;\r\n        };\r\n\r\n        self.contains = function(element) {\r\n            return elements.indexOf(element) !== -1 ? true : false;\r\n        };\r\n\r\n        self.union = function(s) {\r\n            var resultSet = s.clone();\r\n            for (var i = 0; i < elements.length; i++) {\r\n                resultSet.add(elements[i]);\r\n            }\r\n            return resultSet;\r\n        };\r\n\r\n        self.intersect = function(s) {\r\n            var resultSet = set();\r\n            for (var i = 0; i < elements.length; i++) {\r\n                if (s.contains(elements[i])) {\r\n                    resultSet.add(elements[i]);\r\n                }\r\n            }\r\n            return resultSet;\r\n        };\r\n\r\n        self.difference = function(s) {\r\n            var resultSet = set();\r\n            for (var i = 0; i < elements.length; i++) {\r\n                if (!s.contains(elements[i])) {\r\n                    resultSet.add(elements[i]);\r\n                }\r\n            }\r\n            return resultSet;  \r\n        };\r\n\r\n        self.isSubset = function(s) {\r\n            if (elements.length <= s.size()) {\r\n                for (var i = 0; i < elements.length; i++) {\r\n                    if (!s.contains(elements[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        self.clone = function() {\r\n            var s = set();\r\n            for (var i = 0; i < elements.length; i++) {\r\n                s.add(elements[i]);\r\n            }\r\n            return s;\r\n        };\r\n\r\n        // export the set api\r\n        self.export = function() {\r\n            return this;\r\n        };\r\n\r\n        return self;\r\n    };\r\n\r\n    return set;\r\n};","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/lib/dataStructures/stack.js":"/*!\r\n * datastructures-js\r\n * stack\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n \r\n'use strict';\r\n\r\nmodule.exports = function() {\r\n\r\n    return function() {\r\n        \r\n        var self = {},\r\n            top = 0,\r\n            elements = [];\r\n\r\n        self.isEmpty = function() {\r\n            return top > 0 ? false : true;\r\n        };\r\n\r\n        self.length = function() {\r\n            return top;\r\n        };\r\n        \r\n        self.push = function(element) {\r\n            elements[top++] = element;\r\n        };\r\n\r\n        self.pop =  function() {\r\n            return top > 0 ? elements.splice(--top, 1)[0] : null;\r\n        };\r\n\r\n        self.peek = function() {\r\n            return top > 0 ? elements[top-1] : null;\r\n        };\r\n\r\n        // export the stack api\r\n        self.export = function() {\r\n            return this;\r\n        };\r\n\r\n        return self;\r\n    };\r\n};","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/lib/helpers/index.js":"/*!\r\n * datastructures-js\r\n * index (helpers module)\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = {\r\n    sumCharsHash: require('./sumCharsHash')\r\n};","/home/travis/build/npmtest/node-npmtest-datastructures-js/node_modules/datastructures-js/lib/helpers/sumCharsHash.js":"/*!\r\n * datastructures-js\r\n * helpers/sumCharsHash\r\n * Copyright(c) 2015 Eyas Ranjous <eyas@eyasranjous.info>\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function(H, P) {\r\n\r\n    return function(value) {\r\n        \r\n        var sum = 0;\r\n\r\n        value = value.toString();\r\n        for (var i = 0; i < value.length; i++) {\r\n            sum = (H * sum) + value.charCodeAt(i);\r\n        }\r\n\r\n        return sum % P;\r\n    };\r\n\r\n};"}